1.栈
 - 栈是一种线性饿的数据结构，相比数组，栈相应操作是数组的子集，它只能从一端添加元素，也只能从一端取出元素，这一端也被我们称为栈顶
 - 栈是一种后进先出的数据结构
2.栈的常见应用：
 - 撤销，把你本次的行为撤销掉，恢复到上一次状态，而你的每次行动都会被添加到栈中，然后我们点击撤销操作之后就会把栈顶也就是你的最
新一次操作弹出栈，从而实现撤销功能
 - 程序调用的系统栈，用来记录函数跳转后执行完应该回到哪里，比如 A 方法第二行调用了 B 方法，那么会在栈内存储一个类似 A2 的这样一个信息，等 B
方法执行完了，系统会去栈内看现在我该去执行什么，这时系统应该回到 A 方法的第二行去继续执行
3.栈的常见操作复杂度分析
（人家是数组末尾当栈顶，所以才是这样的复杂度，而我实现是数组头当栈顶，我的 E pop() 的复杂度为 O(n)）
 - void push(E)      -> O(1) 均摊（因为动态数组）
 - E pop()           -> O(1) 均摊（因为动态数组）
 - E peek()          -> O(1)
 - int size()        -> O(1)
 - boolean isEmpty() -> O(1)

1.队列
 - 队列也是一种线性结构，相比数组，队列对应操作是数组的子集，只能从一端（队尾）添加元素，只能从另一端（队尾）取出元素
 - 队列是一种先进先出的数据结构
2.队列的常见操作复杂度分析
 - void enqueue(E)   -> O(1) 均摊（因为动态数组）
 - E dequeue()       -> O(n)
 - E getFront()      -> O(1)
 - int size()        -> O(1)
 - boolean isEmpty() -> O(1)
3.如何优化 dequeue() 的复杂度？删除数组头部元素后，所有元素都需要向前移动，所以导致了复杂度增加，那么如果我们不移动元素呢？我们可以新增
一个记录队首的下标，比如数组中有三个元素时，那么现在队首下标肯定是 0，如果我出队了一个元素，那么队首元素需要 ++，那么现在队首下标就成了 1，
这样我们就不用通过移动元素来实现了，从而减少复杂度
4.循环队列，实现循环队列我们需要维护两个下标值，一个 front（队首），一个 tail（队尾 + 1，也就是下次要插入元素的位置），我们认为当
front == tail 时队列为空， 如 0 == 0，两个下标都为空，如果我们有五个元素，我们移除了两个元素后，那么 front 为 2，tail 为 5，然后我们
继续插入元素，当我们插到数组最后一个元素后如果我们还想进行插入，这个时候我们就可以看一下 front，如果不为 0，那么就说明数组头部还有空余位
置，但是由于我们刚才认为 front == tail 时队列为空，所以就算我们跑到数组头部去插入数据时我们也不能让数组满了，这样的话就会导致 front == tail，
所以我们认为 （tail + 1）% c（容量） == front 时，队列就满了，不过这时候我们其实是有意识的浪费了一个数组空间
5.循环队列的复杂度：
 - void enqueue(E)   -> O(1) 均摊（因为动态数组）
 - E dequeue()       -> O(1) 均摊（因为动态数组）
 - E getFront()      -> O(1)
 - int size()        -> O(1)
 - boolean isEmpty() -> O(1)













