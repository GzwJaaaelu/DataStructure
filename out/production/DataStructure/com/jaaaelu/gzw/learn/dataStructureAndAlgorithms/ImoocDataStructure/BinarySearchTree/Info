二分搜索树
1.树结构本身是一种天然的组织结构，如文件夹，图书分类，公司组织架构等
2.为什么使用数结构：
 - 高效，容易检索
3.二叉树
 - 和链表一样，是动态数据结构
 - 对于每一个节点来说都只能最多分成两个叉
 - 二叉树具有唯一的根节点
 - 没有子节点的节点叫做叶子节点
 - 每个节点最多只能有父节点，没有父节点的节点就是根节点
 - 和链表一样，具有天然的递归结构
4.二分搜索树
 - 首先是二叉树，所以二叉树的特征二分搜索树都具备
 - 二分搜索树的每个节点的值：大于其左子树的的所有节点的值，小于其右子树的所有节点的值
 - 每一棵子树也是二分搜索树
 - 存储的元素必须有可比较性
5.遍历操作
 - 遍历操作就是把所有节点都访问一遍
 - 在线性结构下，遍历是极其容易的
6.二分搜索树的遍历
 - 前序遍历：先访问节点，然后再访问左右子树
 代码如下(traverse 为遍历的递归函数)：
  if (node == null) {
    return;
  }
  访问该节点
  traverse(node.left);
  traverse(node.right);
 - 中序遍历：先访问节点左子树，然后访问节点，最后访问节点的右子树
 - 中序遍历的结果是二分搜索树的排序后结果，从小到大
  代码如下(traverse 为遍历的递归函数)：
   if (node == null) {
     return;
   }
   traverse(node.left);
   访问该节点
   traverse(node.right);
 - 后序遍历：先访问节点的左右子树，然后访问该节点
 - 后序遍历的一个引用就是为二分搜索树释放内存
   代码如下(traverse 为遍历的递归函数)：
    if (node == null) {
      return;
    }
    traverse(node.left);
    traverse(node.right);
    访问该节点
7.广度优先遍历的意义（一层一层遍历）
 - 更快的找到问题的解
 - 常用于算法设计——最短路径
8.删除二分搜索树的某一个节点的情况比较复杂，需要找到待删除的节点，然后分成三种情况：
 - 如果该节点没有左子树，那么直接将其节点的右子树赋值给上一层节点的左子树
 - 如果该节点没有右子树，那么直接将其节点的左子树赋值给上一层节点的右子树
 - 如果该节点两个子树都有，那么就可以在右子树找到一个最小值或者左子树找到一个最大值来顶替它的位置，然后别忘了把顶替的人本身之前位置上的节
 点删掉